parse.messages <- function(x) if(!is.null(x$message)) x$message else NA
mymessages <- unlist(sapply(myposts, parse.master, f=parse.messages))
# and the most liked status is...
mymessages[which.max(mylikes)]
### TED FACEBOOK PAGE
setwd("/Users/Jimmy/Dropbox/Personal/fun with code")
# the code uses 'facebook' function from the previous gist (https://gist.github.com/1634662) or
# see the original http://romainfrancois.blog.free.fr/index.php?post/2012/01/15/Crawling-facebook-with-R
# go to 'https://developers.facebook.com/tools/explorer' to get your access token
#"******************* INPUT YOUR ACCESS TOKEN ******************************"
access_token <- "CAAHShUXofUABACNcZA9Hr3cmZBIHXdt5TwWTYuW66Lf5bWHROgltvenZA7uKXWZB2YFBTgaMNsZBWFGRIStyPU0TG7JEaT48apXKPBCerzIL1a6R1ZBUJFTgFWbIpbL8GEha1AOQtwSwv9GsDSKdAF4kN28y2UB8pZBnKZApewcxXZBmZAcHgtVRAOGXeq8ZCHubXFa9CoTakNMfgZDZD"
require(RCurl)
require(rjson)
#Assign libraries
library (Rfacebook)
library (Rook)
#A fixed facebook function in http://stackoverflow.com/questions/15046111/how-to-get-most-popular-facebook-post-in-r
facebook <- function( path = "me", access_token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s?access_token=%s", path, options, access_token ) )
fromJSON( data )
}
### MY FACEBOOK POSTS
myposts <- list()
i <- 0
next.path <- "me/posts"
# download all my posts
while(length(next.path)!=0) {
i<-i+1
myposts[[i]] <- facebook(path=next.path , access_token=access_token)
next.path <- sub("https://graph.facebook.com/", "", myposts[[i]]$paging$'next')
}
myposts[[i]] <- NULL
# parse the list, extract number of likes and the corresponding text (status)
parse.master <- function(x, f)
sapply(x$data, f)
parse.likes <- function(x) if(!is.null(x$likes$count)) x$likes$count else 0
mylikes <- unlist(sapply(myposts, parse.master, f=parse.likes))
parse.messages <- function(x) if(!is.null(x$message)) x$message else NA
mymessages <- unlist(sapply(myposts, parse.master, f=parse.messages))
# and the most liked status is...
mymessages[which.max(mylikes)]
ted <- list()
i<-0
next.path <- "508118722/posts"
# download all TED posts
while(length(next.path)!=0) {
i<-i+1
ted[[i]] <- facebook( path=next.path , access_token=access_token)
next.path <- sub("https://graph.facebook.com/","",ted[[i]]$paging$'next')
}
ted[[i]] <- NULL
# parse just video links posted by TED
parse.count.ted <- function(x)
if (x$type=="link" & x$from$id=="29092950651") x$likes$count else NA
parse.link.ted <- function(x)
if (x$type=="link" & x$from$id=="29092950651") x$link else NA
ted.counts <- unlist(sapply(ted, parse.master, f=parse.count.ted))
ted.links <- unlist(sapply(ted, parse.master, f=parse.link.ted))
# see three most popular talks
ted.links[order(ted.counts,decreasing=TRUE)][1:3]
##########################################################################################
# scrape the list of friends
friends <- facebook( path="me/friends" , access_token=access_token)
# extract Facebook IDs
friends.id <- sapply(friends$data, function(x) x$id)
# extract names
friends.name <- sapply(friends$data, function(x)  iconv(x$name,"UTF-8","ASCII//TRANSLIT"))
# short names to initials
initials <- function(x) paste(substr(x,1,1), collapse="")
friends.initial <- sapply(strsplit(friends.name," "), initials)
# friendship relation matrix
N <- length(friends.id)
friendship.matrix <- matrix(0,N,N)
for (i in 1:N) {
tmp <- facebook( path=paste("me/mutualfriends", friends.id[i], sep="/") , access_token=access_token)
mutualfriends <- sapply(tmp$data, function(x) x$id)
friendship.matrix[i,friends.id %in% mutualfriends] <- 1
}
require(Rgraphviz)
# convert relation matrix to graph
g <- new("graphAM", adjMat=friendship.matrix)
# ellipse graph with initials
pdf(file="facebook1.pdf", width=25, height=25)
attrs <- list(node=list(shape="ellipse", fixedsize=FALSE))
nAttrs <- list(label=friends.initial)
names(nAttrs$label) <- nodes(g)
plot(g, "neato", attrs=attrs, nodeAttrs=nAttrs)
dev.off()
library(rjson)
mypage <- "https://impactstory.org/profile/JamesBlack?hide=markup,awards"
### Load profile
json_file <- mypage
json_data <- fromJSON(paste(readlines(mypage),collapse=""))
json_data <- fromJSON(paste(readLines(mypage),collapse=""))
json_data <- fromJSON(file=mypage)
json_data <- getURL(mypage)
library(rcurl) # it's https
library(RCurl) # it's https
json_data <- getURL(mypage)
json_data <- fromJSON(file=json_data)
json_data <- fromJSON(getURL(mypage)
)
mypage <- "https://impactstory.org/profile/JamesBlack?hide=markup,awards"
### Load profile
json_data <- fromJSON(getURL(mypage))
json_data <- fromJSON(
gsub('\\w','  ',getURL(mypage)) # remove escape character
)
getURL(mypage),unexpected.escape = "keep") # remove escape character
raw_json <- getURL(mypage)
json_data <- fromJSON(mypage,unexpected.escape = "keep") # remove escape character
json_data <- fromJSON(raw_json,unexpected.escape = "keep") # remove escape character
raw_json
raw_json[[2]]
raw_json[[1]]
json_data$bio
json_data$creater
json_data$created
json_data$created
json_data[1]
json_data$about$url_slug
json_data$about$account_products
json_data$about$account_products[]
json_data$about$account_products[[]]
json_data$accountproducts
json_data$accountproducts[]
json_data[[]]
json_data[[]
json_data[
json_data[]
json_data$products[]
json_data$products[38]
json_data$products$biblio
json_data$products[38]biblio
json_data$products[38]$biblio
library(plyr) # for json to dataframe
do.call("rbind.fill", lapply(json_data, as.data.frame))
json_data[[1]]
json_data[[2]]
json_data[[3]]
json_data[[4]]
json_data[[5]]
json_data[[5]]$journals
closer <- json_data[[5]]
closer[[3]]
closer[
]
closer$journals
closer[[3]]$journals
json_data[[5]][[3]]$journals
# journals published in
journals <- json_data[[5]][[3]]$journals
journals <- as.dataframe(json_data[[5]][[3]]$journals)
journals <- as.data.frame(json_data[[5]][[3]]$journals)
View(journals)
journals <- t(as.data.frame(json_data[[5]][[3]]$journals))
View(journals)
json_data[[6]]
json_data[[5]]
json_data[[7]]
json_data[[8]]
closer <- json_data[[8]]
closer$biblio$title
closer[[]]$biblio$title
closer[[44]]$biblio$title
closer[[1]]$has_metrics
length(closer)
closer[[2]]$has_metrics
closer[[3]]$has_metrics
for i in 1:length(closer){
closer[[i]]$has_metrics
}
for (i in 1:length(closer)){
closer[[i]]$has_metrics
}
i
for (i in 1:length(closer)){
closer[[i]]$has_metrics
}
1:length(closer)
for (i in 1:length(closer)){
print(closer[[i]]$has_metrics)
}
loser[[6]]$has_metrics
closer[[6]]$has_metrics
closer[[6]]
library(xkcd)
install.packages("wesanderson")
library(wesanderson)
# Current list of available palettes
namelist
pal <- wes.palette(name = "Zissou", type = "continuous")
image(volcano, col = pal(21))
pal <- wes.palette(name = "Zissou", type = "continuous")
image(volcano, col = pal(21))
data <- data(volcano)
library(devtools)
source_url('https://gist.github.com/menugget/7689145/raw/dac746aa322ca4160a5fe66c70fec16ebe26faf9/image.scale.2.r')
source_url('https://gist.github.com/menugget/7864454/raw/f698da873766347d837865eecfa726cdf52a6c40/plot.stream.4.R')
source_url('https://gist.github.com/menugget/7864471/raw/8127dfaae183233d203580bc247a73a564d5feab/plot.stacked.2.R')
set.seed(1)
m <- 500
n <- 30
x <- seq(m)
y <- matrix(0, nrow=m, ncol=n)
colnames(y) <- seq(n)
for(i in seq(ncol(y))){
mu <- runif(1, min=0.25*m, max=0.75*m)
SD <- runif(1, min=5, max=20)
TMP <- rnorm(1000, mean=mu, sd=SD)
HIST <- hist(TMP, breaks=c(0,x), plot=FALSE)
fit <- smooth.spline(HIST$counts ~ HIST$mids)
y[,i] <- fit$y
library(devtools)
source_url('https://gist.github.com/menugget/7689145/raw/dac746aa322ca4160a5fe66c70fec16ebe26faf9/image.scale.2.r')
source_url('https://gist.github.com/menugget/7864454/raw/f698da873766347d837865eecfa726cdf52a6c40/plot.stream.4.R')
source_url('https://gist.github.com/menugget/7864471/raw/8127dfaae183233d203580bc247a73a564d5feab/plot.stacked.2.R')
set.seed(1)
m <- 500
n <- 30
x <- seq(m)
y <- matrix(0, nrow=m, ncol=n)
colnames(y) <- seq(n)
for(i in seq(ncol(y))){
mu <- runif(1, min=0.25*m, max=0.75*m)
SD <- runif(1, min=5, max=20)
TMP <- rnorm(1000, mean=mu, sd=SD)
HIST <- hist(TMP, breaks=c(0,x), plot=FALSE)
fit <- smooth.spline(HIST$counts ~ HIST$mids)
y[,i] <- fit$y
}
y <- replace(y, y<0.01, 0)
#Plot Ex. 1 - Color by max value
pal <- colorRampPalette(c(rgb(0.85,0.85,1), rgb(0.2,0.2,0.7)))
BREAKS <- pretty(apply(y,2,max),8)
LEVS <- levels(cut(1, breaks=BREAKS))
COLS <- pal(length(BREAKS )-1)
z <- val2col(apply(y,2,max), col=COLS)
plot.stacked(x,y, xlim=c(100, 400), ylim=c(0, 1.2*max(apply(y,1,sum), na.rm=TRUE)), yaxs="i", col=z, border="white", lwd=0.5)
library(devtools)
source_url('https://gist.github.com/menugget/7689145/raw/dac746aa322ca4160a5fe66c70fec16ebe26faf9/image.scale.2.r')
source_url('https://gist.github.com/menugget/7864454/raw/f698da873766347d837865eecfa726cdf52a6c40/plot.stream.4.R')
source_url('https://gist.github.com/menugget/7864471/raw/8127dfaae183233d203580bc247a73a564d5feab/plot.stacked.2.R')
set.seed(1)
m <- 500
n <- 30
x <- seq(m)
y <- matrix(0, nrow=m, ncol=n)
colnames(y) <- seq(n)
for(i in seq(ncol(y))){
mu <- runif(1, min=0.25*m, max=0.75*m)
SD <- runif(1, min=5, max=20)
TMP <- rnorm(1000, mean=mu, sd=SD)
HIST <- hist(TMP, breaks=c(0,x), plot=FALSE)
fit <- smooth.spline(HIST$counts ~ HIST$mids)
y[,i] <- fit$y
}
y <- replace(y, y<0.01, 0)
#Plot Ex. 1 - Color by max value
pal <- colorRampPalette(c(rgb(0.85,0.85,1), rgb(0.2,0.2,0.7)))
BREAKS <- pretty(apply(y,2,max),8)
LEVS <- levels(cut(1, breaks=BREAKS))
COLS <- pal(length(BREAKS )-1)
z <- val2col(apply(y,2,max), col=COLS)
namelist
namelist[1]
display.wes.palette(4, "GrandBudapest")
namelist[1]
namelist[,1]
namelist[1,]
nrows(namelist)
nrow(namelist)
namelist[1,1]
namelist[1,2]
# loop through showing palettes
for (i in 1:nrow(namelist)){
display.wes.palette(namelist[1,1],
namelist[1,2])
}
namelist[1,1]
namelist[2,1]
namelist[1,1]
namelist[1,2]
namelist[2,2]
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(name_list,
name_movie)
}
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
par(mfrow=c(2,2))
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
par(mfrow=c(2,3))
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
par(mfrow=c(5,3))
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
par(mfrow=c(4,3))
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
par(mfrow=c(3,3))
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
qplot(Sepal.Length,
Petal.Length,
data = iris,
color = Species)
qplot(Sepal.Length,
Petal.Length,
data = iris,
color = Species)+
theme_bw()
qplot(Sepal.Length,
Petal.Length,
data = iris,
color = Species)+
theme_bw()+
scale_color_manual(values = wes.palette(3, "GrandBudapest"))
qplot(Sepal.Length,
Petal.Length,
data = iris,
color = Species,
size = Petal.Width)+
theme_bw()+
scale_color_manual(values = wes.palette(3, "GrandBudapest"))
setwd("~/datasciencecoursera/explore/project1")
hist(data$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
data <- read.csv("proj1data.csv")
data$DateTime <- as.POSIXlt(data$DateTime)
hist(data$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
plot(data$DateTime, data$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power (kilowatts)")
plot(tbl$DateTime, tbl$Sub_metering_1,
type="l",
xlab="",
ylab="Energy sub metering",
col="Black")
lines(tbl$DateTime, tbl$Sub_metering_2,
type="l",
col="Red")
lines(tbl$DateTime, tbl$Sub_metering_3,
type="l",
col="Blue")
legend("topright",
lty=1, lwd=1,
col=c("Black","Red","Blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(data$DateTime, tbl$Sub_metering_1,
type="l",
xlab="",
ylab="Energy sub metering",
col="Black")
lines(data$DateTime, tbl$Sub_metering_2,
type="l",
col="Red")
lines(data$DateTime, tbl$Sub_metering_3,
type="l",
col="Blue")
legend("topright",
lty=1, lwd=1,
col=c("Black","Red","Blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(data$DateTime, data$Sub_metering_1,
type="l",
xlab="",
ylab="Energy sub metering",
col="Black")
lines(data$DateTime, data$Sub_metering_2,
type="l",
col="Red")
lines(data$DateTime, data$Sub_metering_3,
type="l",
col="Blue")
legend("topright",
lty=1, lwd=1,
col=c("Black","Red","Blue"),
legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
par(mfrow=c(2,2))
# topleft
with(proj1data, plot(DateTime,
Global_active_power,
xlab="", type="l", ylab="Global Active Power"))
# topright
with(proj1data, plot(DateTime,Voltage, type="l")
# bottom left
with(proj1data, plot(DateTime,Sub_metering_1,
xlab="", type="l", ylab="Energy sub metering"))
with(proj1data,lines(DateTime,Sub_metering_2,
col="red"))
with(proj1data,lines(DateTime,Sub_metering_3,
col="blue")
legend("topright", col=c("black", "red", "blue"),
cex=1, lwd=2,bty="n",
#y.intersp=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# bottomright
with(proj1data, plot(DateTime, Global_reactive_power, type="l"))
par(mfrow=c(2,2))
# topleft
with(proj1data, plot(DateTime,
Global_active_power,
xlab="", type="l", ylab="Global Active Power"))
data <- read.csv("proj1data.csv")
par(mfrow=c(2,2))
# topleft
with(data, plot(DateTime,
Global_active_power,
xlab="", type="l", ylab="Global Active Power"))
# topright
with(data, plot(DateTime,Voltage, type="l")
# bottom left
with(data, plot(DateTime,Sub_metering_1,
xlab="", type="l", ylab="Energy sub metering"))
with(data,lines(DateTime,Sub_metering_2,
col="red"))
with(data,lines(DateTime,Sub_metering_3,
col="blue")
legend("topright", col=c("black", "red", "blue"),
cex=1, lwd=2,bty="n",
#y.intersp=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# bottomright
with(data, plot(DateTime, Global_reactive_power, type="l"))
par(mfrow=c(2,2))
# topleft
with(data, plot(DateTime,
Global_active_power,
xlab="", type="l", ylab="Global Active Power"))
xlab="", type="l", ylab="Global Active Power"))
source('~/datasciencecoursera/explore/project1/plot4.R', echo=TRUE)
with(data, plot(DateTime,
Global_active_power,
xlab="", type="l", ylab="Global Active Power"))
with(data, plot(DateTime,Voltage, type="l")
)
with(data, plot(DateTime,Sub_metering_1,
xlab="", type="l", ylab="Energy sub metering"))
with(data,lines(DateTime,Sub_metering_2,
col="red"))
with(data,lines(DateTime,Sub_metering_3,
col="blue")
legend("topright", col=c("black", "red", "blue"),
cex=1, lwd=2,bty="n",
#y.intersp=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
source('~/.active-rstudio-document', echo=TRUE)
with(data, plot(DateTime,Sub_metering_1,
xlab="", type="l", ylab="Energy sub metering"))
with(data,lines(DateTime,Sub_metering_2,
col="red"))
with(data,lines(DateTime,Sub_metering_3,
col="blue")
legend("topright", col=c("black", "red", "blue"),
cex=1, lwd=2,bty="n",
#y.intersp=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(data, plot(DateTime,Sub_metering_1,
xlab="", type="l", ylab="Energy sub metering"))
with(data,lines(DateTime,Sub_metering_2,
col="red"))
with(data,lines(DateTime,Sub_metering_3,
col="blue")
)
legend("topright", col=c("black", "red", "blue"),
cex=1, lwd=2,bty="n",
#y.intersp=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# bottomright
with(data, plot(DateTime, Global_reactive_power, type="l"))
dev.off()
source('~/datasciencecoursera/explore/project1/plot4.R', echo=TRUE)
