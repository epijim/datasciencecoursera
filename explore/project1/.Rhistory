source('~/funwithcode_local/pub_crawl/pub_crawl.R', echo=TRUE)
source('~/funwithcode_local/pub_crawl/pub_crawl.R', echo=TRUE)
source('~/funwithcode_local/pub_crawl/pub_crawl.R', echo=TRUE)
source('~/funwithcode_local/pub_crawl/pub_crawl.R', echo=TRUE)
setwd("~/funwithcode_local/pub_crawl")
library(gridExtra)
library(ggmap)
basemap <- get_map(location="Cambridge, UK",
zoom=13, source='google',
maptype="terrain", color="bw")
## Read in data
temporaryFile <- tempfile()
download.file("https://gist.githubusercontent.com/epijim/47da5037b6bb0d750b9b/raw/1f5608b826d039384775f2de87fcab9f5c8311d9/cam_pubs.csv",
destfile=temporaryFile, method="curl")
pubs <- read.csv(temporaryFile)
n <- as.numeric(nrow(pubs)) # number of pubs
pubs
select.pubs <- ("The Cambridge Brew House","The Cambridge Blue",
"King Street Run P.H.","The Elm Tree",
"The Eagle Public House","Old Spring Public House",
"The Regal","The Flying Pig")
select.pubs <- c("The Cambridge Brew House","The Cambridge Blue",
"King Street Run P.H.","The Elm Tree",
"The Eagle Public House","Old Spring Public House",
"The Regal","The Flying Pig")
setwd("~/funwithcode_local/pub_crawl")
library(gridExtra)
library(ggmap)
library(calibrate)
basemap <- get_map(location="Cambridge, UK",
zoom=13, source='google',
maptype="terrain", color="bw")
## Read in data
temporaryFile <- tempfile()
download.file("https://gist.githubusercontent.com/epijim/47da5037b6bb0d750b9b/raw/1f5608b826d039384775f2de87fcab9f5c8311d9/cam_pubs.csv",
destfile=temporaryFile, method="curl")
pubs <- read.csv(temporaryFile)
## Variables to set #############################################
n <- as.numeric(nrow(pubs)) # number of pubs
M <- 5000 # number of iterations
temp <- 50 # initial temperature
finaltemp <- 0.1
tempfactor <- (temp/finaltemp)^(-1/M)
fixed.itr <- 5 # number of iteration for a fixed temperature
## Choose pubs you want #########################################
select.pubs <- c("The Cambridge Brew House","The Cambridge Blue",
"King Street Run P.H.","The Elm Tree",
"The Eagle Public House","Old Spring Public House",
"The Regal","The Flying Pig")
subset(pubs, name %in% select.pubs)
pubs.select <- subset(pubs, name %in% select.pubs)
selected.pubs <- subset(pubs, name %in% select.pubs)
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
d[i] <- jb_difference(selected.pubs$lat[ord[i]],
selected.pubs$lon[ord[i]],
selected.pubs$lat[ord[i+1]],
selected.pubs$lon[ord[i+1]])
d <- rep(0,p)
p <- length(ord)
d <- rep(0,p)
d[i] <- jb_difference(selected.pubs$lat[ord[i]],
selected.pubs$lon[ord[i]],
selected.pubs$lat[ord[i+1]],
selected.pubs$lon[ord[i+1]])
}
distance <- function(ord){
p <- length(ord)
d <- rep(0,p)
for(i in 1:(p-1)){
d[i] <- jb_difference(selected.pubs$lat[ord[i]],
selected.pubs$lon[ord[i]],
selected.pubs$lat[ord[i+1]],
selected.pubs$lon[ord[i+1]])
}
d[p] <- dist(selected.pubs$lat[ord[1]],
selected.pubs$lon[ord[1]],
selected.pubs$lat[ord[p]],
selected.pubs$lon[ord[p]] )
distance=sum(d)
return(cost)
}
d[i] <- jb_difference(selected.pubs$lat[ord[i]],
selected.pubs$lon[ord[i]],
selected.pubs$lat[ord[i+1]],
selected.pubs$lon[ord[i+1]])
d[p] <- dist(selected.pubs$lat[ord[1]],
selected.pubs$lon[ord[1]],
selected.pubs$lat[ord[p]],
selected.pubs$lon[ord[p]] )
d[p] <- jb_difference(selected.pubs$lat[ord[1]],
selected.pubs$lon[ord[1]],
selected.pubs$lat[ord[p]],
selected.pubs$lon[ord[p]] )
distance=sum(d)
return(cost)
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
a=sample(1:n,2) # randomly choosing two cities
result=ord
result[a[2]]=ord[a[1]] # swapping
result[a[1]]=ord[a[2]] # swapping
U=runif(1)
U < exp( (distance(ord)-distance(result))/temp )){
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
U < exp( (distance(ord)-distance(result))/temp )){
U < exp( (distance(ord)-distance(result))/temp ))
(distance(ord)-distance(result))/temp )
(distance(ord)-distance(result))/temp
(distance(ord)-distance(result))/temp
exp( (distance(ord)-distance(result))/temp ))
exp( (distance(ord)-distance(result))/temp )
(distance(ord)-distance(result))
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
temperature <- data.frame(1:M,templist)
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
(temp/finaltemp)^(-1/M)
ggplot(data=temperature,
aes(x=X1.M, y=templist)) +
geom_line()+
theme_bw()+
xlim(0, M)+ ylim(0, 50)+
ggtitle("Cooling of algorithm")+
xlab("Iteration")+
ylab("Temperature")+
geom_point(data=temperature[i,],
size=5,colour="red",
aes(x=X1.M, y=templist))
dev.off()
ggplot(data=temperature,
aes(x=X1.M, y=templist)) +
geom_line()+
theme_bw()+
xlim(0, M)+ ylim(0, 50)+
ggtitle("Cooling of algorithm")+
xlab("Iteration")+
ylab("Temperature")+
geom_point(data=temperature[i,],
size=5,colour="red",
aes(x=X1.M, y=templist))
ggplot(data=temperature,
aes(x=X1.M, y=templist)) +
geom_line()+
theme_bw()+
xlim(0, M)+ ylim(0, 50)+
ggtitle("Cooling of algorithm")+
xlab("Iteration")+
ylab("Temperature")+
geom_point(data=temperature[i,],
size=5,colour="red",
aes(x=X1.M, y=templist))
plot(templist,type='l',main="temperature cooling down")
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
temperature$templist
max(temperature$templist)
bottomleft <- ggplot(data=temperature,
aes(x=X1.M, y=templist)) +
geom_line()+
theme_bw()+
xlim(0, M)+ ylim(0, max(temperature$templist))+
ggtitle("Cooling of algorithm")+
xlab("Iteration")+
ylab("Temperature")+
geom_point(data=temperature[i,],
size=5,colour="red",
aes(x=X1.M, y=templist))
bottomleft
grid.arrange(left, right, bottomleft, bottomright,
nrow=2,ncol=2, heights=c(1, 1))
dev.off()
dev.off()
bottomleft
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
source('~/funwithcode_local/pub_crawl/mypub_crawl.R', echo=TRUE)
setwd("~/funwithcode_local/pub_crawl")
library(gridExtra)
library(ggmap)
library(calibrate)
basemap <- get_map(location="Cambridge, UK",
zoom=13, source='google',
maptype="terrain", color="bw")
## Read in data
temporaryFile <- tempfile()
download.file("https://gist.githubusercontent.com/epijim/47da5037b6bb0d750b9b/raw/1f5608b826d039384775f2de87fcab9f5c8311d9/cam_pubs.csv",
destfile=temporaryFile, method="curl")
pubs <- read.csv(temporaryFile)
## Choose pubs you want #########################################
select.pubs <- c("The Cambridge Brew House","The Cambridge Blue",
"King Street Run P.H.","The Elm Tree",
"The Eagle Public House","Old Spring Public House",
"The Regal","The Flying Pig")
selected.pubs <- subset(pubs, name %in% select.pubs)
## Variables to set #############################################
n <- as.numeric(nrow(selected.pubs)) # number of pubs
M <- 4000 # number of iterations
temp <- 100 # initial temperature
finaltemp <- 0.1
tempfactor <- (temp/finaltemp)^(-1/M)
fixed.itr <- 5 # number of iteration for a fixed temperature
## FUNCTIONS ####################################################
## Check if integer
check.integer <- function(x) {
x == round(x)
}
## Difference between 2 points
jb_difference <- function(lat_1,lon_1,lat_2,lon_2){
rad <- pi/180
a1 <- lat_1*rad
a2 <- lon_1*rad
b1 <- lat_2*rad
b2 <- lon_2*rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.14500001
d <- R * c
return(d)
}
distance <- function(ord){
p <- length(ord)
d <- rep(0,p)
for(i in 1:(p-1)){
d[i] <- jb_difference(selected.pubs$lat[ord[i]],
selected.pubs$lon[ord[i]],
selected.pubs$lat[ord[i+1]],
selected.pubs$lon[ord[i+1]])
}
d[p] <- jb_difference(selected.pubs$lat[ord[1]],
selected.pubs$lon[ord[1]],
selected.pubs$lat[ord[p]],
selected.pubs$lon[ord[p]] )
distance=sum(d)
return(distance)
}
## Initial values ################################################
cost1 <- rep(0,M)
numaccept <- 0 # to keep track of accepting
templist <- rep(0,M) # to keep track of temperature
ord <- seq(1:n) # initial order for the path
max.distance <- 15
# temperature <- data.frame(1:M,templist)
##
for(i in 1:M){
cost1[i]=distance(ord)
for(t in 1:(fixed.itr)){
# propose to move
a=sample(1:n,2) # randomly choosing two cities
result=ord
result[a[2]]=ord[a[1]] # swapping
result[a[1]]=ord[a[2]] # swapping
U=runif(1)
if(
U < exp( (distance(ord)-distance(result))/temp )){
ord<-result # accept/reject
numaccept <- numaccept + 1 # to compute the acceptance rate +}
}
}
templist[i] <- temp
temp <- temp*0.999
temp <- tempfactor*temp
if(check.integer(i/10)==T){
pubs_inorder <- selected.pubs[ord,]
right <-  ggmap(basemap,, extent = "device") +
geom_path(aes(x=lon, y=lat),
data=pubs_inorder)+
geom_point(data=pubs_inorder, aes(x=lon, y=lat))
length <- 1:length(cost1)
fitting <- data.frame(length,cost1)
left <- ggplot(data=fitting,
aes(x=length, y=cost1)) +
geom_line()+
theme_bw()+
xlim(0, M)+ ylim(0, max.distance)+
ggtitle("Pub crawl distance")+
xlab("Iteration")+
ylab("Total distance in km")
fitting$cost1[fitting$cost1<1] <- NA
bottomright <- ggplot(fitting, aes(x=cost1)) +
geom_histogram(aes(y = ..density..),
color="black", fill=NA) +
theme_bw()+
ggtitle("Observed distances")+
xlab("Distance in KM")+
ylab("Density")+
xlim(0, max.distance)
bottomleft <- ggplot(data=temperature,
aes(x=X1.M, y=templist)) +
geom_line()+
theme_bw()+
xlim(0, M)+ ylim(0, max(temperature$templist))+
ggtitle("Cooling of algorithm")+
xlab("Iteration")+
ylab("Temperature")+
geom_point(data=temperature[i,],
size=5,colour="red",
aes(x=X1.M, y=templist))
png(paste0("gif",sprintf("%03d", i/10),".jpg"))
grid.arrange(left, right, bottomleft, bottomright,
nrow=2,ncol=2, heights=c(1, 1))
dev.off()
}
}
setwd("~/funwithcode_local/pub_crawl")
library(gridExtra)
library(ggmap)
library(calibrate)
basemap <- get_map(location="Cambridge, UK",
zoom=13, source='google',
maptype="terrain", color="bw")
## Read in data
temporaryFile <- tempfile()
download.file("https://gist.githubusercontent.com/epijim/47da5037b6bb0d750b9b/raw/1f5608b826d039384775f2de87fcab9f5c8311d9/cam_pubs.csv",
destfile=temporaryFile, method="curl")
pubs <- read.csv(temporaryFile)
## Choose pubs you want #########################################
select.pubs <- c("The Cambridge Brew House","The Cambridge Blue",
"King Street Run P.H.","The Elm Tree",
"The Eagle Public House","Old Spring Public House",
"The Regal","The Flying Pig")
selected.pubs <- subset(pubs, name %in% select.pubs)
## Variables to set #############################################
n <- as.numeric(nrow(selected.pubs)) # number of pubs
M <- 4000 # number of iterations
temp <- 100 # initial temperature
finaltemp <- 0.1
tempfactor <- (temp/finaltemp)^(-1/M)
fixed.itr <- 5 # number of iteration for a fixed temperature
## FUNCTIONS ####################################################
## Check if integer
check.integer <- function(x) {
x == round(x)
}
## Difference between 2 points
jb_difference <- function(lat_1,lon_1,lat_2,lon_2){
rad <- pi/180
a1 <- lat_1*rad
a2 <- lon_1*rad
b1 <- lat_2*rad
b2 <- lon_2*rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.14500001
d <- R * c
return(d)
}
distance <- function(ord){
p <- length(ord)
d <- rep(0,p)
for(i in 1:(p-1)){
d[i] <- jb_difference(selected.pubs$lat[ord[i]],
selected.pubs$lon[ord[i]],
selected.pubs$lat[ord[i+1]],
selected.pubs$lon[ord[i+1]])
}
d[p] <- jb_difference(selected.pubs$lat[ord[1]],
selected.pubs$lon[ord[1]],
selected.pubs$lat[ord[p]],
selected.pubs$lon[ord[p]] )
distance=sum(d)
return(distance)
}
## Initial values ################################################
cost1 <- rep(0,M)
numaccept <- 0 # to keep track of accepting
templist <- rep(0,M) # to keep track of temperature
ord <- seq(1:n) # initial order for the path
max.distance <- 15
# temperature <- data.frame(1:M,templist)
##
for(i in 1:M){
cost1[i]=distance(ord)
for(t in 1:(fixed.itr)){
# propose to move
a=sample(1:n,2) # randomly choosing two cities
result=ord
result[a[2]]=ord[a[1]] # swapping
result[a[1]]=ord[a[2]] # swapping
U=runif(1)
if(
U < exp( (distance(ord)-distance(result))/temp )){
ord<-result # accept/reject
numaccept <- numaccept + 1 # to compute the acceptance rate +}
}
}
templist[i] <- temp
temp <- temp*0.999
temp <- tempfactor*temp
if(check.integer(i/10)==T){
pubs_inorder <- selected.pubs[ord,]
right <-  ggmap(basemap,, extent = "device") +
geom_path(aes(x=lon, y=lat),
data=pubs_inorder)+
geom_point(data=pubs_inorder, aes(x=lon, y=lat))
length <- 1:length(cost1)
fitting <- data.frame(length,cost1)
left <- ggplot(data=fitting,
aes(x=length, y=cost1)) +
geom_line()+
theme_bw()+
xlim(0, M)+ ylim(0, max.distance)+
ggtitle("Pub crawl distance")+
xlab("Iteration")+
ylab("Total distance in km")
fitting$cost1[fitting$cost1<1] <- NA
bottomright <- ggplot(fitting, aes(x=cost1)) +
geom_histogram(aes(y = ..density..),
color="black", fill=NA) +
theme_bw()+
ggtitle("Observed distances")+
xlab("Distance in KM")+
ylab("Density")+
xlim(0, max.distance)
bottomleft <- ggplot(data=temperature,
aes(x=X1.M, y=templist)) +
geom_line()+
theme_bw()+
xlim(0, M)+ ylim(0, max(temperature$templist))+
ggtitle("Cooling of algorithm")+
xlab("Iteration")+
ylab("Temperature")+
geom_point(data=temperature[i,],
size=5,colour="red",
aes(x=X1.M, y=templist))
png(paste0("gif",sprintf("%03d", i/10),".jpg"))
grid.arrange(left, right, bottomleft, bottomright,
nrow=2,ncol=2, heights=c(1, 1))
dev.off()
}
}
pubs_inorder <- selected.pubs[ord,]
pubs_inorder
70!
factorial(70)
options(scipen=999)
factorial(70)
options(scipen=2)
factorial(70)
length(11978571669969593041585343924010989547595285211136586990698044893867644997562684446335837569936261120)
nchar(11978571669969593041585343924010989547595285211136586990698044893867644997562684446335837569936261120)
test <- factorial(70)
test2 <- factorial(65)
test2 <- factorial(69)
temp<- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",tmp)
temp<- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",tmp)
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
setwd("~/funwithcode_local/pub_crawl")
setwd("~/datasciencecoursera/explore/project1")
setwd("~/datasciencecoursera/explore/project1")
## Pop over and get the file
temp<- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
temp)
data <- unzip(temp, list=TRUE)$Name
# remove link to temp
unlink(temp)
tmp1 <- file(data, "r")
temp<- tempfile()
temp <- tempfile()
temp <- download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip")
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
data <- unzip(temp, list=TRUE)$Name
tmp1 <- file(data, "r")
data <- read.table(unz(temp, "a1.txt"))
data <- read.table(unz(temp, "household_power_consumption.txt"))
cat(grep("(^Date)|(^[1|2]/2/2007)",readLines(data), value=TRUE), sep="\n", file="proj1data.txt")
data <- read.table(unzip(temp, "household_power_consumption.txt"))
data <- read.table(unzip(temp, "household_power_consumption.txt"),
sep=";", header=TRUE, dec=".", na.strings = "?")
View(data)
unlink(temp) # unlinks auto?
data$DateTime <- strptime(paste(data$Date, data$Time), "%d/%m/%Y %H:%M:%S")
data$DateChr <- as.character(data$Date)
head(data)
proj1data <- data[(data$DateTime>="2007-02-01" & data$DateTime<="2007-02-02") ,]
proj1data <- data[(data$DateTime>=as.Date("2007-02-01") &
data$DateTime<=as.Date("2007-02-02")) ,]
proj1data <- data[(data$DateTime>=as.POSIXlt("2007-02-01 00:00:00") &
data$DateTime<=as.POSIXlt("2007-02-03 00:00:00")) ,]
write.csv(proj1data, file = "proj1data.csv")
data <- read.csv("proj1data.csv")
data$DateTime <- as.POSIXlt(data$DateTime)
# plot¡
hist(data$DateTime$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
hist(data$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
hist(data$Global_active_power,
dev.off()
hist(data$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
# plot
hist(data$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
