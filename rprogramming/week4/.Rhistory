#Installing packages
install.packages("Rfacebook")
install.packages("Rook")
#Assign libraries
library (Rfacebook)
library (Rook)
# Set working directory
setwd("/Users/Jimmy/Dropbox/Personal/fun with code")
# the code uses 'facebook' function from the previous gist (https://gist.github.com/1634662) or
# see the original http://romainfrancois.blog.free.fr/index.php?post/2012/01/15/Crawling-facebook-with-R
# go to 'https://developers.facebook.com/tools/explorer' to get your access token
#"******************* INPUT YOUR ACCESS TOKEN ******************************"
access_token <- "CAAHShUXofUABACNcZA9Hr3cmZBIHXdt5TwWTYuW66Lf5bWHROgltvenZA7uKXWZB2YFBTgaMNsZBWFGRIStyPU0TG7JEaT48apXKPBCerzIL1a6R1ZBUJFTgFWbIpbL8GEha1AOQtwSwv9GsDSKdAF4kN28y2UB8pZBnKZApewcxXZBmZAcHgtVRAOGXeq8ZCHubXFa9CoTakNMfgZDZD"
require(RCurl)
require(rjson)
#Installing packages
install.packages("Rfacebook")
install.packages("Rook")
#Assign libraries
library (Rfacebook)
library (Rook)
#A fixed facebook function in http://stackoverflow.com/questions/15046111/how-to-get-most-popular-facebook-post-in-r
facebook <- function( path = "me", access_token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s?access_token=%s", path, options, access_token ) )
fromJSON( data )
}
### MY FACEBOOK POSTS
myposts <- list()
i <- 0
next.path <- "me/posts"
# download all my posts
while(length(next.path)!=0) {
i<-i+1
myposts[[i]] <- facebook(path=next.path , access_token=access_token)
next.path <- sub("https://graph.facebook.com/", "", myposts[[i]]$paging$'next')
}
myposts[[i]] <- NULL
# parse the list, extract number of likes and the corresponding text (status)
parse.master <- function(x, f)
sapply(x$data, f)
parse.likes <- function(x) if(!is.null(x$likes$count)) x$likes$count else 0
mylikes <- unlist(sapply(myposts, parse.master, f=parse.likes))
parse.messages <- function(x) if(!is.null(x$message)) x$message else NA
mymessages <- unlist(sapply(myposts, parse.master, f=parse.messages))
# and the most liked status is...
mymessages[which.max(mylikes)]
### TED FACEBOOK PAGE
# http://www.facebook.com/TED
# TED's Facebook ID 29092950651 can be found on http://graph.facebook.com/TED
ted <- list()
i<-0
next.path <- "248945318566280/posts"
# download all TED posts
while(length(next.path)!=0) {
i<-i+1
ted[[i]] <- facebook( path=next.path , access_token=access_token)
next.path <- sub("https://graph.facebook.com/","",ted[[i]]$paging$'next')
}
ted[[i]] <- NULL
# parse just video links posted by TED
parse.count.ted <- function(x)
if (x$type=="link" & x$from$id=="29092950651") x$likes$count else NA
parse.link.ted <- function(x)
if (x$type=="link" & x$from$id=="29092950651") x$link else NA
ted.counts <- unlist(sapply(ted, parse.master, f=parse.count.ted))
ted.links <- unlist(sapply(ted, parse.master, f=parse.link.ted))
# see three most popular talks
ted.links[order(ted.counts,decreasing=TRUE)][1:3]
##########################################################################################
# scrape the list of friends
friends <- facebook( path="me/friends" , access_token=access_token)
# extract Facebook IDs
friends.id <- sapply(friends$data, function(x) x$id)
# extract names
friends.name <- sapply(friends$data, function(x)  iconv(x$name,"UTF-8","ASCII//TRANSLIT"))
# short names to initials
initials <- function(x) paste(substr(x,1,1), collapse="")
friends.initial <- sapply(strsplit(friends.name," "), initials)
# friendship relation matrix
N <- length(friends.id)
friendship.matrix <- matrix(0,N,N)
for (i in 1:N) {
tmp <- facebook( path=paste("me/mutualfriends", friends.id[i], sep="/") , access_token=access_token)
mutualfriends <- sapply(tmp$data, function(x) x$id)
friendship.matrix[i,friends.id %in% mutualfriends] <- 1
}
require(Rgraphviz)
# convert relation matrix to graph
g <- new("graphAM", adjMat=friendship.matrix)
# ellipse graph with initials
pdf(file="facebook1.pdf", width=25, height=25)
attrs <- list(node=list(shape="ellipse", fixedsize=FALSE))
nAttrs <- list(label=friends.initial)
names(nAttrs$label) <- nodes(g)
plot(g, "neato", attrs=attrs, nodeAttrs=nAttrs)
dev.off()
install.packages("Rfacebook")
install.packages("Rfacebook")
install.packages("Rook")
# Set working directory
setwd("/Users/Jimmy/Dropbox/Personal/fun with code")
# the code uses 'facebook' function from the previous gist (https://gist.github.com/1634662) or
# see the original http://romainfrancois.blog.free.fr/index.php?post/2012/01/15/Crawling-facebook-with-R
# go to 'https://developers.facebook.com/tools/explorer' to get your access token
#"******************* INPUT YOUR ACCESS TOKEN ******************************"
access_token <- "CAAHShUXofUABACNcZA9Hr3cmZBIHXdt5TwWTYuW66Lf5bWHROgltvenZA7uKXWZB2YFBTgaMNsZBWFGRIStyPU0TG7JEaT48apXKPBCerzIL1a6R1ZBUJFTgFWbIpbL8GEha1AOQtwSwv9GsDSKdAF4kN28y2UB8pZBnKZApewcxXZBmZAcHgtVRAOGXeq8ZCHubXFa9CoTakNMfgZDZD"
require(RCurl)
require(rjson)
#Assign libraries
library (Rfacebook)
library (Rook)
#A fixed facebook function in http://stackoverflow.com/questions/15046111/how-to-get-most-popular-facebook-post-in-r
facebook <- function( path = "me", access_token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s?access_token=%s", path, options, access_token ) )
fromJSON( data )
}
### MY FACEBOOK POSTS
myposts <- list()
i <- 0
next.path <- "me/posts"
# download all my posts
while(length(next.path)!=0) {
i<-i+1
myposts[[i]] <- facebook(path=next.path , access_token=access_token)
next.path <- sub("https://graph.facebook.com/", "", myposts[[i]]$paging$'next')
}
myposts[[i]] <- NULL
# parse the list, extract number of likes and the corresponding text (status)
parse.master <- function(x, f)
sapply(x$data, f)
parse.likes <- function(x) if(!is.null(x$likes$count)) x$likes$count else 0
mylikes <- unlist(sapply(myposts, parse.master, f=parse.likes))
parse.messages <- function(x) if(!is.null(x$message)) x$message else NA
mymessages <- unlist(sapply(myposts, parse.master, f=parse.messages))
# and the most liked status is...
mymessages[which.max(mylikes)]
install.packages("Rfacebook")
# Set working directory
setwd("/Users/Jimmy/Dropbox/Personal/fun with code")
# the code uses 'facebook' function from the previous gist (https://gist.github.com/1634662) or
# see the original http://romainfrancois.blog.free.fr/index.php?post/2012/01/15/Crawling-facebook-with-R
# go to 'https://developers.facebook.com/tools/explorer' to get your access token
#"******************* INPUT YOUR ACCESS TOKEN ******************************"
access_token <- "CAAHShUXofUABACNcZA9Hr3cmZBIHXdt5TwWTYuW66Lf5bWHROgltvenZA7uKXWZB2YFBTgaMNsZBWFGRIStyPU0TG7JEaT48apXKPBCerzIL1a6R1ZBUJFTgFWbIpbL8GEha1AOQtwSwv9GsDSKdAF4kN28y2UB8pZBnKZApewcxXZBmZAcHgtVRAOGXeq8ZCHubXFa9CoTakNMfgZDZD"
require(RCurl)
require(rjson)
#Assign libraries
library (Rfacebook)
library (Rook)
#A fixed facebook function in http://stackoverflow.com/questions/15046111/how-to-get-most-popular-facebook-post-in-r
facebook <- function( path = "me", access_token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s?access_token=%s", path, options, access_token ) )
fromJSON( data )
}
### MY FACEBOOK POSTS
myposts <- list()
i <- 0
next.path <- "me/posts"
# download all my posts
while(length(next.path)!=0) {
i<-i+1
myposts[[i]] <- facebook(path=next.path , access_token=access_token)
next.path <- sub("https://graph.facebook.com/", "", myposts[[i]]$paging$'next')
}
myposts[[i]] <- NULL
# parse the list, extract number of likes and the corresponding text (status)
parse.master <- function(x, f)
sapply(x$data, f)
parse.likes <- function(x) if(!is.null(x$likes$count)) x$likes$count else 0
mylikes <- unlist(sapply(myposts, parse.master, f=parse.likes))
parse.messages <- function(x) if(!is.null(x$message)) x$message else NA
mymessages <- unlist(sapply(myposts, parse.master, f=parse.messages))
# and the most liked status is...
mymessages[which.max(mylikes)]
### TED FACEBOOK PAGE
setwd("/Users/Jimmy/Dropbox/Personal/fun with code")
# the code uses 'facebook' function from the previous gist (https://gist.github.com/1634662) or
# see the original http://romainfrancois.blog.free.fr/index.php?post/2012/01/15/Crawling-facebook-with-R
# go to 'https://developers.facebook.com/tools/explorer' to get your access token
#"******************* INPUT YOUR ACCESS TOKEN ******************************"
access_token <- "CAAHShUXofUABACNcZA9Hr3cmZBIHXdt5TwWTYuW66Lf5bWHROgltvenZA7uKXWZB2YFBTgaMNsZBWFGRIStyPU0TG7JEaT48apXKPBCerzIL1a6R1ZBUJFTgFWbIpbL8GEha1AOQtwSwv9GsDSKdAF4kN28y2UB8pZBnKZApewcxXZBmZAcHgtVRAOGXeq8ZCHubXFa9CoTakNMfgZDZD"
require(RCurl)
require(rjson)
#Assign libraries
library (Rfacebook)
library (Rook)
#A fixed facebook function in http://stackoverflow.com/questions/15046111/how-to-get-most-popular-facebook-post-in-r
facebook <- function( path = "me", access_token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s?access_token=%s", path, options, access_token ) )
fromJSON( data )
}
### MY FACEBOOK POSTS
myposts <- list()
i <- 0
next.path <- "me/posts"
# download all my posts
while(length(next.path)!=0) {
i<-i+1
myposts[[i]] <- facebook(path=next.path , access_token=access_token)
next.path <- sub("https://graph.facebook.com/", "", myposts[[i]]$paging$'next')
}
myposts[[i]] <- NULL
# parse the list, extract number of likes and the corresponding text (status)
parse.master <- function(x, f)
sapply(x$data, f)
parse.likes <- function(x) if(!is.null(x$likes$count)) x$likes$count else 0
mylikes <- unlist(sapply(myposts, parse.master, f=parse.likes))
parse.messages <- function(x) if(!is.null(x$message)) x$message else NA
mymessages <- unlist(sapply(myposts, parse.master, f=parse.messages))
# and the most liked status is...
mymessages[which.max(mylikes)]
ted <- list()
i<-0
next.path <- "508118722/posts"
# download all TED posts
while(length(next.path)!=0) {
i<-i+1
ted[[i]] <- facebook( path=next.path , access_token=access_token)
next.path <- sub("https://graph.facebook.com/","",ted[[i]]$paging$'next')
}
ted[[i]] <- NULL
# parse just video links posted by TED
parse.count.ted <- function(x)
if (x$type=="link" & x$from$id=="29092950651") x$likes$count else NA
parse.link.ted <- function(x)
if (x$type=="link" & x$from$id=="29092950651") x$link else NA
ted.counts <- unlist(sapply(ted, parse.master, f=parse.count.ted))
ted.links <- unlist(sapply(ted, parse.master, f=parse.link.ted))
# see three most popular talks
ted.links[order(ted.counts,decreasing=TRUE)][1:3]
##########################################################################################
# scrape the list of friends
friends <- facebook( path="me/friends" , access_token=access_token)
# extract Facebook IDs
friends.id <- sapply(friends$data, function(x) x$id)
# extract names
friends.name <- sapply(friends$data, function(x)  iconv(x$name,"UTF-8","ASCII//TRANSLIT"))
# short names to initials
initials <- function(x) paste(substr(x,1,1), collapse="")
friends.initial <- sapply(strsplit(friends.name," "), initials)
# friendship relation matrix
N <- length(friends.id)
friendship.matrix <- matrix(0,N,N)
for (i in 1:N) {
tmp <- facebook( path=paste("me/mutualfriends", friends.id[i], sep="/") , access_token=access_token)
mutualfriends <- sapply(tmp$data, function(x) x$id)
friendship.matrix[i,friends.id %in% mutualfriends] <- 1
}
require(Rgraphviz)
# convert relation matrix to graph
g <- new("graphAM", adjMat=friendship.matrix)
# ellipse graph with initials
pdf(file="facebook1.pdf", width=25, height=25)
attrs <- list(node=list(shape="ellipse", fixedsize=FALSE))
nAttrs <- list(label=friends.initial)
names(nAttrs$label) <- nodes(g)
plot(g, "neato", attrs=attrs, nodeAttrs=nAttrs)
dev.off()
rankhospital <- function(state, outcome, num) {
# location
setwd("~/datasciencecoursera/rprogramming/week4")
loc_data <- "rprog-data-ProgAssignment3-data/"
# Read outcome data
data <- read.csv(paste0(loc_data,"outcome-of-care-measures.csv"), colClasses = "character")
# State level data
data_state <- subset(data, data$State == state)
if (nrow(data_state) == 0) {
stop("invalid state")
}
if (num != "best" && num != "worst" && num > nrow(data_state)) {
return("NA")
stop()
}
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
state_hospitals <- data_state$Hospital.Name
if (outcome == "heart attack") {
MortalityRate <- data_state[,11]
} else if (outcome == "heart failure") {
MortalityRate <- data_state[,17]
} else if (outcome == "pneumonia") {
MortalityRate <- data_state[,23]
}
data_outcomespec <- cbind(state_hospitals, MortalityRate)
# Drop missing
data_outcomespec <- subset(data_outcomespec,
data_outcomespec[,2] != "Not Available")
# order by alpha
data_outcomespec <- data_outcomespec[order(data_outcomespec[,1]),]
# order by rate
data_outcomespec <- data_outcomespec[order(as.numeric(data_outcomespec[,2])),]
if (num == "best") {
return(data_outcomespec[[1,1]])
} else if (num == "worst") {
return(data_outcomespec[[nrow(data_outcomespec),1]])
} else {
return(data_outcomespec[[num,1]])
}
}
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
rankall <- function(outcome, num = "best") {
# location
setwd("~/datasciencecoursera/rprogramming/week4")
loc_data <- "rprog-data-ProgAssignment3-data/"
# Read outcome data
data <- read.csv(paste0(loc_data,"outcome-of-care-measures.csv"), colClasses = "character")
if (outcome != "heart attack" && outcome != "heart failure" && outcome != "pneumonia") {
stop("invalid outcome")
}
if (outcome == "heart attack") {
Column <- 11
} else if (outcome == "heart failure") {
Column <- 17
} else if (outcome == "pneumonia") {
Column <- 23
}
HospitalStates <- data$State
Hospitals <- data$Hospital.Name
Outcome <- data[,Column]
data_all <- cbind(HospitalStates, Hospitals, Outcome)
data_with <- subset(data_all, data_all[,3] != "Not Available")
# by hospo name
d <- data_with[order(data_with[,2]),]
# by mortality rate
df <- d[order(as.numeric(d[,3])),]
States <- sort(unique(df[,1]))
hospitals <- vector()
for (state in States) {
d <- subset(df, df[,1] == state)
if (num != "best" && num != "worst" && num > nrow(d)) {
hospName <- "<NA>"
} else {
if (num == "best") {
hospName <- d[[1,2]]
} else if (num == "worst") {
hospName <- d[[nrow(d),2]]
} else {
hospName <- d[[num,2]]
}
}
hospitals <- append(hospitals, hospName)
}
return(data.frame(hospital=hospitals, state=States))
}
head(rankall("heart attack", 20), 10)
# hospital                                  state
# <NA>                                      AK
# D W MCMILLAN MEMORIAL HOSPITAL            AL
# ARKANSAS METHODIST MEDICAL CENTER         AR
# AZ JOHN C LINCOLN DEER VALLEY HOSPITAL    AZ
# SHERMAN OAKS HOSPITAL                     CA
# SKY RIDGE MEDICAL CENTER                  CO
# MIDSTATE MEDICAL CENTER                   CT
# <NA>                                      DC
# <NA>                                      DE
# SOUTH FLORIDA BAPTIST HOSPITAL            FL
tail(rankall("pneumonia", "worst"), 3)
# hospital                                      state
# WI MAYO CLINIC HEALTH SYSTEM - NORTHLAND, INC    WI
# WV                     PLATEAU MEDICAL CENTER    WV
# WY           NORTH BIG HORN HOSPITAL DISTRICT    WY
tail(rankall("heart failure"), 10)
# hospital                                                            state
# WELLMONT HAWKINS COUNTY MEMORIAL HOSPITAL    TN
# FORT DUNCAN MEDICAL CENTER    TX
# UT VA SALT LAKE CITY HEALTHCARE - GEORGE E. WAHLEN VA MEDICAL CENTER    UT
# SENTARA POTOMAC HOSPITAL    VA
# GOV JUAN F LUIS HOSPITAL & MEDICAL CTR    VI
# SPRINGFIELD HOSPITAL    VT
# HARBORVIEW MEDICAL CENTER    WA
# AURORA ST LUKES MEDICAL CENTER    WI
# FAIRMONT GENERAL HOSPITAL    WV
# CHEYENNE VA MEDICAL CENTER    WY
submit()
submit()
submit()
rankall("heart failure", 10)
rankall("heart failure", 1)
rankhospital("heart failure", 1)
rankhospital("SENTARA POTOMAC HOSPITAL","heart failure", 1)
rankhospital("SENTARA POTOMAC HOSPITAL","heart failure")
rankhospital("VT","heart failure",1)
rankhospital("VT","heart failure",2:3)
directory <- "~/Dropbox/Personal/fun with code/moves/"
download <- "20140828"
# turn into function treemap_moves <-
library(googleVis)
library(foreign)
# Get data
data <- read.csv(paste0(
directory,download,"/full/storyline.csv"),
stringsAsFactors=F)
library(plyr)
data$Duration <- data$Duration/60
time_sleeping <- length(unique(data$Date))*(7*60)
## Base
tree_data <- data.frame(
Name=as.character("All"),
Parent=NA,
Duration=0)[
numeric(0),]
Name <- "All"
Parent <- NA
Duration <- 10
tree_data <- data.frame(Name,Parent,Duration)
## Snowshoing is realy punting..
data$Name[data$Name == "snowshoeing"] <- "punting"
## Level 1
# Work with Where (Level 1)
data$Level1 <- data$Name
# How many places?
unique(data$Level1)
# Merge Heathrow locations
data$Level1[data$Level1 == "Place in Heathrow Airport"] <- "Heathrow"
data$Level1[data$Level1 == "Place in Terminal 3"] <- "Heathrow"
data$Level1[data$Level1 == "Place in Heathrow Terminal 3"] <- "Heathrow"
# Around Cambridge
data$Level1[data$Level1 == "Place in Cambridge"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Place in Cambridgeshire"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Cambridge Market"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Place in Quayside"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Rob's place"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Wesley Church"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Sainsbury's"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Whipple Museum of the History of Science"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Simon's house"] <- "Cambridge (other)"
data$Level1[data$Level1 == "TK Maxx"] <- "Cambridge (other)"
data$Level1[data$Level1 == "A Waller & Son"] <- "Cambridge (other)"
data$Level1[data$Level1 == "SMOKEWORKS"] <- "Cambridge (other)"
data$Level1[data$Level1 == "The Co-operative Food"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Cambridge Wine Merchants"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Jesus green"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Cho Mee"] <- "Cambridge (other)"
data$Level1[data$Level1 == "Fred and Adelle's"] <- "Cambridge (other)"
# In college
data$Level1[data$Level1 == "Jesus study centre"] <- "Jesus College"
data$Level1[data$Level1 == "Cambridge Science Centre"] <- "Jesus College"
data$Level1[data$Level1 == "Jesus Forum"] <- "Jesus College"
data$Level1[data$Level1 == "49 Jesus lane "] <- "Jesus College"
data$Level1[data$Level1 == "Pavilion Jesus College"] <- "Jesus College"
data$Level1[data$Level1 == "Jesus college gym"] <- "Jesus College"
# Travelling
data$Level1[data$Level1 == "cycling"] <- "Moving"
data$Level1[data$Level1 == "walking"] <- "Moving"
data$Level1[data$Level1 == "running"] <- "Moving"
data$Level1[data$Level1 == "transport"] <- "Moving"
data$Level1[data$Level1 == "punting"] <- "Moving"
# Other colleges
data$Level1[data$Level1 == "Robinson College"] <- "Other colleges"
data$Level1[data$Level1 == "Scholars garden, St. John's "] <- "Other colleges"
data$Level1[data$Level1 == "Girton"] <- "Other colleges"
data$Level1[data$Level1 == "Downing College"] <- "Other colleges"
# Pubs
data$Level1[data$Level1 == "Fort St. George"] <- "Pubs"
data$Level1[data$Level1 == "The Cock Inn"] <- "Pubs"
data$Level1[data$Level1 == "The Cambridge Brewhouse"] <- "Pubs"
data$Level1[data$Level1 == "The Granta"] <- "Pubs"
data$Level1[data$Level1 == "Pint Shop"] <- "Pubs"
# Change remaining so not on 2 levels
data$Level1[data$Level1 == "Jesus College"] <- "My College"
data$Level1[data$Level1 == "Home"] <- "Casa de James"
data$Level1[data$Level1 == "MRC Epidemiology Unit"] <- "My department"
data$Level1[data$Level1 == "Heathrow"] <- "Airports"
unique(data$Level1)
# collapse
level1 <- ddply(data, "Level1", summarize, Duration = sum(Duration))
names(level1)[1] <- "Name"
level1$Parent <- "All"
# add to tree_data
tree_data <- rbind(tree_data,level1)
## Level 2
data$Level2 <- data$Name
# collapse
level2 <- ddply(data, c("Level2","Level1"), summarize, Duration = sum(Duration))
names(level2)[1] <- "Name"
names(level2)[2] <- "Parent"
# add to tree_data
tree_data <- rbind(tree_data,level2)
# tree_data$Region <- tree_data$Region
#tree_data$Parent <- tree_data$Parent
# Time asleep
tree_data$Duration[tree_data$Name=="Casa de James"] <- tree_data$Duration[tree_data$Name=="Casa de James"] - time_sleeping
# Plot it
Tree <- gvisTreeMap(tree_data,
"Name", "Parent",
"Duration", "Duration",
options=list(fontSize=16,
width=600,
showScale=T))
plot(Tree)
